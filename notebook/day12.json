{
	"name": "day12",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "carlsmall",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ae609368-f555-4ced-98f1-69d10c43b73b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d3313606-ce08-408b-8d6e-0965e2fba137/resourceGroups/rg_carl_follows/providers/Microsoft.Synapse/workspaces/asa-wks-carl-follows/bigDataPools/carlsmall",
				"name": "carlsmall",
				"type": "Spark",
				"endpoint": "https://asa-wks-carl-follows.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/carlsmall",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd\r\n",
					"import numpy as np"
				],
				"execution_count": 275
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"col_specs = []\r\n",
					"\r\n",
					"for i in range(140):\r\n",
					"    col_specs.append((i, i+1))\r\n",
					"\r\n",
					"df_input = pd.read_fwf(\"abfss://fsn-carl-follows@adlscarlfollows.dfs.core.windows.net/day12/input.txt\"\\\r\n",
					"                    , header=None\\\r\n",
					"                    , index_col=False\\\r\n",
					"                    , colspecs=col_specs)\r\n",
					"\r\n",
					"df_input.columns = range(0, len(df_input.columns))\r\n",
					"df_input.head(10)"
				],
				"execution_count": 276
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# pivot to list of coordinates\r\n",
					"df_coord = df_input.stack().to_frame().rename_axis(index=('y','x'))\r\n",
					"df_coord.columns = ['plant']\r\n",
					"df_coord.reset_index(inplace=True)\r\n",
					"df_coord['idx'] = df_coord.index\r\n",
					"\r\n",
					"df_coord.head(20)"
				],
				"execution_count": 277
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def x_step(r):\r\n",
					"    if r['direction'] == 'u':\r\n",
					"        return r['x']\r\n",
					"    elif r['direction'] == 'd':\r\n",
					"        return r['x']\r\n",
					"    elif r['direction'] == 'l':\r\n",
					"        return r['x'] -1\r\n",
					"    elif r['direction'] == 'r':\r\n",
					"        return r['x'] + 1"
				],
				"execution_count": 278
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def y_step(r):\r\n",
					"    if r['direction'] == 'u':\r\n",
					"        return r['y'] - 1\r\n",
					"    elif r['direction'] == 'd':\r\n",
					"        return r['y'] + 1\r\n",
					"    elif r['direction'] == 'l':\r\n",
					"        return r['y']\r\n",
					"    elif r['direction'] == 'r':\r\n",
					"        return r['y']"
				],
				"execution_count": 279
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def grow_plot(df_plot, df_unassociated):\r\n",
					"    df_possible_plot = df_plot.explode('direction')\r\n",
					"    df_possible_plot['x_step'] = df_possible_plot.apply(x_step, axis=1)\r\n",
					"    df_possible_plot['y_step'] = df_possible_plot.apply(y_step, axis=1)\r\n",
					"    #df_possible_plot.head()\r\n",
					"\r\n",
					"    df_additional_plot = df_possible_plot.merge(df_unassociated, how='inner', left_on=['plant','x_step','y_step'], right_on=['plant','x','y'], suffixes=('', '_add'))\r\n",
					"    df_additional_plot = df_additional_plot[df_additional_plot['idx_add'] != df_additional_plot['idx']]\r\n",
					"    df_additional_plot = df_additional_plot[['region', 'plant', 'x_add', 'y_add', 'idx_add']]\r\n",
					"    df_additional_plot.columns = ('region', 'plant', 'x', 'y', 'idx')\r\n",
					"    #df_additional_plot.head()\r\n",
					"\r\n",
					"    # only unique points and add future directions\r\n",
					"    df_additional_plot = df_additional_plot.groupby('idx').max().reset_index()\r\n",
					"    df_additional_plot['direction'] = [['u','d','l','r']] * df_additional_plot.shape[0]\r\n",
					"\r\n",
					"    return df_additional_plot    "
				],
				"execution_count": 280
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def build_region(df_plot, df_unassociated):\r\n",
					"\r\n",
					"    additional_plots = 1\r\n",
					"    i_grow = 1\r\n",
					"\r\n",
					"    while (additional_plots > 0) & (i_grow < 100):\r\n",
					"        # grow the region with adjacent plots\r\n",
					"        df_additional_plot = grow_plot(df_plot, df_unassociated)\r\n",
					"        df_additional_plot['grow_iteration'] = i_grow\r\n",
					"        additional_plots = df_additional_plot.shape[0]\r\n",
					"\r\n",
					"        # add new plants to their regions\r\n",
					"        df_plot = pd.concat([df_plot, df_additional_plot])\r\n",
					"\r\n",
					"        # remove newly associated plants from the available list\r\n",
					"        df_unassociated = df_unassociated.merge(df_plot, how='left', left_on='idx', right_on='idx', suffixes=('', '_region'), indicator = True)\r\n",
					"        df_unassociated = df_unassociated[df_unassociated['_merge'] == 'left_only']\r\n",
					"        df_unassociated = df_unassociated[['plant', 'x', 'y', 'idx']]\r\n",
					"        #df_unassociated.head(10)\r\n",
					"\r\n",
					"        # iteration management\r\n",
					"        # print(f\"grow {i_grow}: found {additional_plots} additional plots\")\r\n",
					"        i_grow += 1\r\n",
					"\r\n",
					"    return df_plot, df_unassociated"
				],
				"execution_count": 281
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_unassociated = df_coord.copy()\r\n",
					"unassociated_plots = df_unassociated.shape[0]\r\n",
					"discovered_regions = 0\r\n",
					"\r\n",
					"df_region = pd.DataFrame(columns=['region','plant','x','y','idx','grow_iteration','direction'])\r\n",
					"\r\n",
					"while unassociated_plots > 0:\r\n",
					"\r\n",
					"    df_new_region_idx = df_unassociated.groupby('plant')['idx'].min().to_frame().reset_index()\r\n",
					"    df_new_region = df_unassociated.merge(df_new_region_idx, how='inner', left_on=['plant','idx'], right_on=['plant','idx'])\r\n",
					"    df_new_region['region'] = df_new_region.index + discovered_regions + 1\r\n",
					"    df_new_region = df_new_region.reindex(columns=['region', 'plant', 'x', 'y', 'idx'])\r\n",
					"    df_new_region['grow_iteration'] = 0\r\n",
					"    df_new_region['direction'] = [['u','d','l','r']] * df_new_region.shape[0]\r\n",
					"    #df_new_region.head()\r\n",
					"\r\n",
					"    # build region from initial plot\r\n",
					"    df_new_region, df_unassociated = build_region(df_new_region, df_unassociated)\r\n",
					"    # add region to list \r\n",
					"    df_region = pd.concat([df_region, df_new_region])\r\n",
					"    discovered_regions = df_region['region'].max()\r\n",
					"\r\n",
					"    # iteration management\r\n",
					"    unassociated_plots = df_unassociated.shape[0]"
				],
				"execution_count": 282
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_region[df_region['plant']=='C'].head(20)"
				],
				"execution_count": 283
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_region_coord = df_region[['region', 'plant', 'x', 'y', 'idx']].set_index('idx')\r\n",
					"#df_region_coord[df_region_coord['plant']=='C']\r\n",
					"df_region_coord.head(10)"
				],
				"execution_count": 284
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_region_size = df_region_coord.groupby(['region', 'plant'])['plant'].count().to_frame()\r\n",
					"df_region_size.rename(columns={'plant': 'plot_count'}, inplace=True)\r\n",
					"df_region_size.head(20)"
				],
				"execution_count": 285
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_region[['x', 'y', 'plant']].set_index(['y', 'x']).unstack()"
				],
				"execution_count": 286
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_unassociated.head()"
				],
				"execution_count": 287
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_region_coord['direction'] = [['u','d','l','r']] * df_region_coord.shape[0]\r\n",
					"\r\n",
					"df_possible_perim = df_region_coord.explode('direction')\r\n",
					"df_possible_perim['x_step'] = df_possible_perim.apply(x_step, axis=1)\r\n",
					"df_possible_perim['y_step'] = df_possible_perim.apply(y_step, axis=1)\r\n",
					"\r\n",
					"df_region_perim = df_possible_perim.merge(df_region_coord, how='left', left_on=['region', 'x_step', 'y_step'], right_on=['region', 'x', 'y'], suffixes=('', '_adj'), indicator = True)\r\n",
					"df_region_perim = df_region_perim[df_region_perim['_merge'] == 'left_only']\r\n",
					"df_region_perim = df_region_perim[['region', 'plant', 'x', 'y', 'direction']]\r\n",
					"df_region_perim.head(20)"
				],
				"execution_count": 288
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_region_perim_size = df_region_perim.groupby(['region', 'plant', 'x', 'y'])['direction'].count().to_frame()\r\n",
					"df_region_perim_size.rename(columns={'direction': 'perim_count'}, inplace=True)\r\n",
					"df_region_perim_size.head(20)"
				],
				"execution_count": 289
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_region_perim_agg = df_region_perim_size.groupby(['region', 'plant']).agg(\r\n",
					"    plot_count=('perim_count', np.count_nonzero),\r\n",
					"    perim_count=('perim_count', np.sum)\r\n",
					"    )\r\n",
					"\r\n",
					"df_answer = df_region_size.merge(df_region_perim_agg, how='left', left_index=True, right_index=True, suffixes=('', '_prm'))\r\n",
					"df_answer['price'] = df_answer['plot_count'] * df_answer['perim_count']\r\n",
					"df_answer.head()"
				],
				"execution_count": 290
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_answer['price'].sum()"
				],
				"execution_count": 291
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"part 2"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_region_coord_2 = df_region_coord.set_index(['region','x','y'])\r\n",
					"df_region_coord_2.drop('direction', axis=1, inplace=True)\r\n",
					"df_region_coord_2.head(20)"
				],
				"execution_count": 292
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def walk_region_perim(region, s_x, s_y, s_s, s_d, df_coord):\r\n",
					"\r\n",
					"    x = s_x\r\n",
					"    y = s_y\r\n",
					"    s = s_s\r\n",
					"    d = s_d\r\n",
					"    visited_plot = []\r\n",
					"\r\n",
					"    keep_walking = True\r\n",
					"    edge_count = 0\r\n",
					"\r\n",
					"    while ((keep_walking == True) & (edge_count < 100)):\r\n",
					"\r\n",
					"        if ((d == 'r') & (s == 'u')):\r\n",
					"            visited_plot = visited_plot + [[x,y]]\r\n",
					"            if ((region,x+1,y-1) in df_coord.index):\r\n",
					"                x += 1\r\n",
					"                y -= 1\r\n",
					"                s = 'l'\r\n",
					"                d = 'u'\r\n",
					"                edge_count += 1\r\n",
					"            elif ((region,x+1,y) in df_coord.index):\r\n",
					"                x += 1\r\n",
					"                # y no change\r\n",
					"                s = 'u'\r\n",
					"                d = 'r'\r\n",
					"                # edge_count no change\r\n",
					"            else:\r\n",
					"                #x no change\r\n",
					"                #y no change\r\n",
					"                s = 'r'\r\n",
					"                d = 'd'\r\n",
					"                edge_count += 1\r\n",
					"            #print(f\"walking region {region} stepping to (x={x},y={y}) heading {d} with perim on {s}, edge count = {edge_count}\")\r\n",
					"        elif ((d == 'd') & (s == 'r')):\r\n",
					"            if ((region,x+1,y+1) in df_coord.index):\r\n",
					"                x += 1\r\n",
					"                y += 1\r\n",
					"                s = 'u'\r\n",
					"                d = 'r'\r\n",
					"                edge_count += 1\r\n",
					"            elif ((region,x,y+1) in df_coord.index):\r\n",
					"                #x no change\r\n",
					"                y += 1\r\n",
					"                s = 'r'\r\n",
					"                d = 'd'\r\n",
					"                # edge_count no change\r\n",
					"            else:\r\n",
					"                #x no change\r\n",
					"                #y no change\r\n",
					"                s = 'd'\r\n",
					"                d = 'l'\r\n",
					"                edge_count += 1\r\n",
					"            #print(f\"walking region {region} stepping to (x={x},y={y}) heading {d} with perim on {s}, edge count = {edge_count}\")\r\n",
					"        elif ((d == 'l') & (s == 'd')):\r\n",
					"            if ((region,x-1,y+1) in df_coord.index):\r\n",
					"                x -= 1\r\n",
					"                y += 1\r\n",
					"                s = 'r'\r\n",
					"                d = 'd'\r\n",
					"                edge_count += 1\r\n",
					"            elif ((region,x-1,y) in df_coord.index):\r\n",
					"                x -= 1\r\n",
					"                #y no change\r\n",
					"                s = 'd'\r\n",
					"                d = 'l'\r\n",
					"                # edge_count no change\r\n",
					"            else:\r\n",
					"                #x no change\r\n",
					"                #y no change\r\n",
					"                s = 'l'\r\n",
					"                d = 'u'\r\n",
					"                edge_count += 1\r\n",
					"            #print(f\"walking region {region} stepping to (x={x},y={y}) heading {d} with perim on {s}, edge count = {edge_count}\")\r\n",
					"        elif ((d == 'u') & (s == 'l')):\r\n",
					"            if ((region,x-1,y-1) in df_coord.index):\r\n",
					"                x -= 1\r\n",
					"                y -= 1\r\n",
					"                s = 'd'\r\n",
					"                d = 'l'\r\n",
					"                edge_count += 1\r\n",
					"            elif ((region,x,y-1) in df_coord.index):\r\n",
					"                #x no change\r\n",
					"                y -= 1\r\n",
					"                s = 'l'\r\n",
					"                d = 'u'\r\n",
					"                # edge_count no change\r\n",
					"            else:\r\n",
					"                #x no change\r\n",
					"                #y no change\r\n",
					"                s = 'u'\r\n",
					"                d = 'r'\r\n",
					"                edge_count += 1\r\n",
					"            #print(f\"walking region {region} stepping to (x={x},y={y}) heading {d} with perim on {s}, edge count = {edge_count}\")\r\n",
					"        else:\r\n",
					"            #print(f\"walking region {region} unknown heading {d} with perim on {s}\")\r\n",
					"            keep_walking = False\r\n",
					"\r\n",
					"        if ((x==s_x) & (y==s_y) & (s==s_s) & (d==s_d)):\r\n",
					"            keep_walking = False\r\n",
					"\r\n",
					"    return edge_count, visited_plot"
				],
				"execution_count": 293
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ec, vp = walk_region_perim(3, 3, 1, 'u', 'r', df_region_coord_2.copy())"
				],
				"execution_count": 294
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# find the top left most plot with a upwards perim\r\n",
					"df_region_perim_2 = df_region_perim.reset_index()\r\n",
					"df_region_perim_tl = df_region_perim_2.groupby(['region', 'plant', 'direction'])['x'].min().to_frame()\r\n",
					"df_region_perim_tl = df_region_perim_tl.merge(df_region_perim_2, how='inner', left_on=['region', 'plant', 'x', 'direction'], right_on=['region', 'plant', 'x', 'direction'], suffixes=('', '_findy'))\r\n",
					"df_region_perim_tl = df_region_perim_tl[df_region_perim_tl['direction']=='u'].groupby(['region', 'plant', 'direction', 'x'])['y'].min().to_frame().reset_index().set_index(['region'])\r\n",
					"#df_region_perim_tl.head(10)\r\n",
					"\r\n",
					"# find all the plot upwards perim\r\n",
					"df_region_perim_tl = df_region_perim[df_region_perim['direction']=='u'].reset_index().set_index(['region'])\r\n",
					"df_region_perim_tl.head(20)"
				],
				"execution_count": 295
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_region_perim_tl[df_region_perim_tl['plant'] == 'Y']"
				],
				"execution_count": 302
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"edge_count = []\r\n",
					"plots_visited = []\r\n",
					"\r\n",
					"for idx, region in df_region_perim_tl.iterrows():\r\n",
					"    region_number = idx\r\n",
					"    plant = region['plant']\r\n",
					"    start_x = region['x']\r\n",
					"    start_y = region['y']\r\n",
					"    start_s = region['direction']\r\n",
					"\r\n",
					"    if [start_x, start_y] in plots_visited:\r\n",
					"        edge_count = edge_count + [0]\r\n",
					"    else:\r\n",
					"        new_edge_count, new_visited_plot = walk_region_perim(region_number, start_x, start_y, start_s, 'r', df_region_coord_2.copy())\r\n",
					"        edge_count = edge_count + [new_edge_count]\r\n",
					"        plots_visited = plots_visited + new_visited_plot\r\n",
					"\r\n",
					"        if (plant == 'Y'):\r\n",
					"            print(f\"walking region {region_number} ({plant}) starting at (x={start_x},y={start_y}) found {new_edge_count} new edges\")\r\n",
					"\r\n",
					"df_region_perim_tl['edge_count'] = edge_count"
				],
				"execution_count": 307
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_region_perim_tl_idx = df_region_perim_tl.reset_index().set_index(['region','plant'])\r\n",
					"\r\n",
					"df_answer_2 = df_region_size.merge(df_region_perim_tl_idx, how='left', left_index=True, right_index=True, suffixes=('', '_prm'))\r\n",
					"df_answer_2['price'] = df_answer_2['plot_count'] * df_answer_2['edge_count']\r\n",
					"df_answer_2[df_answer_2['price']!=0].head(10)"
				],
				"execution_count": 314
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_answer_2['price'].sum()\r\n",
					"\r\n",
					"# try 1 = 1118404"
				],
				"execution_count": 317
			}
		]
	}
}