{
	"name": "day12",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "carlsmall",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b8136e13-35ff-4734-89c2-5fea66c40176"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d3313606-ce08-408b-8d6e-0965e2fba137/resourceGroups/rg_carl_follows/providers/Microsoft.Synapse/workspaces/asa-wks-carl-follows/bigDataPools/carlsmall",
				"name": "carlsmall",
				"type": "Spark",
				"endpoint": "https://asa-wks-carl-follows.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/carlsmall",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"col_specs = []\r\n",
					"\r\n",
					"for i in range(4):\r\n",
					"    col_specs.append((i, i+1))\r\n",
					"\r\n",
					"df_input = pd.read_fwf(\"abfss://fsn-carl-follows@adlscarlfollows.dfs.core.windows.net/day12/test_input_2.txt\"\\\r\n",
					"                    , header=None\\\r\n",
					"                    , index_col=False\\\r\n",
					"                    , colspecs=col_specs)\r\n",
					"\r\n",
					"df_input.columns = range(0, len(df_input.columns))\r\n",
					"df_input.head(10)"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# pivot to list of coordinates\r\n",
					"df_coord = df_input.stack().to_frame().rename_axis(index=('y','x'))\r\n",
					"df_coord.columns = ['plant']\r\n",
					"df_coord.reset_index(inplace=True)\r\n",
					"df_coord['idx'] = df_coord.index\r\n",
					"\r\n",
					"df_coord.head(20)"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def x_step(r):\r\n",
					"    if r['direction'] == 'u':\r\n",
					"        return r['x']\r\n",
					"    elif r['direction'] == 'd':\r\n",
					"        return r['x']\r\n",
					"    elif r['direction'] == 'l':\r\n",
					"        return r['x'] -1\r\n",
					"    elif r['direction'] == 'r':\r\n",
					"        return r['x'] + 1"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def y_step(r):\r\n",
					"    if r['direction'] == 'u':\r\n",
					"        return r['y'] - 1\r\n",
					"    elif r['direction'] == 'd':\r\n",
					"        return r['y'] + 1\r\n",
					"    elif r['direction'] == 'l':\r\n",
					"        return r['y']\r\n",
					"    elif r['direction'] == 'r':\r\n",
					"        return r['y']"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def grow_plot(df_plot, df_unassociated):\r\n",
					"    df_possible_plot = df_plot.explode('direction')\r\n",
					"    df_possible_plot['x_step'] = df_possible_plot.apply(x_step, axis=1)\r\n",
					"    df_possible_plot['y_step'] = df_possible_plot.apply(y_step, axis=1)\r\n",
					"    #df_possible_plot.head()\r\n",
					"\r\n",
					"    df_additional_plot = df_possible_plot.merge(df_unassociated, how='inner', left_on=['plant','x_step','y_step'], right_on=['plant','x','y'], suffixes=('', '_add'))\r\n",
					"    df_additional_plot = df_additional_plot[df_additional_plot['idx_add'] > df_additional_plot['idx']]\r\n",
					"    df_additional_plot = df_additional_plot[['region', 'plant', 'x_add', 'y_add', 'idx_add']]\r\n",
					"    df_additional_plot.columns = ('region', 'plant', 'x', 'y', 'idx')\r\n",
					"    #df_additional_plot.head()\r\n",
					"\r\n",
					"    # only unique points and add future directions\r\n",
					"    df_additional_plot = df_additional_plot.groupby('idx').max().reset_index()\r\n",
					"    df_additional_plot['direction'] = [['u','d','l','r']] * df_additional_plot.shape[0]\r\n",
					"\r\n",
					"    return df_additional_plot    "
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def build_region(df_plot, df_unassociated):\r\n",
					"\r\n",
					"    additional_plots = 1\r\n",
					"    i_grow = 1\r\n",
					"\r\n",
					"    while (additional_plots > 0) & (i_grow < 100):\r\n",
					"        # grow the region with adjacent plots\r\n",
					"        df_additional_plot = grow_plot(df_plot, df_unassociated)\r\n",
					"        df_additional_plot['grow_iteration'] = i_grow\r\n",
					"        additional_plots = df_additional_plot.shape[0]\r\n",
					"\r\n",
					"        # add new plants to their regions\r\n",
					"        df_plot = pd.concat([df_plot, df_additional_plot])\r\n",
					"\r\n",
					"        # remove newly associated plants from the available list\r\n",
					"        df_unassociated = df_unassociated.merge(df_plot, how='left', left_on='idx', right_on='idx', suffixes=('', '_region'), indicator = True)\r\n",
					"        df_unassociated = df_unassociated[df_unassociated['_merge'] == 'left_only']\r\n",
					"        df_unassociated = df_unassociated[['plant', 'x', 'y', 'idx']]\r\n",
					"        #df_unassociated.head(10)\r\n",
					"\r\n",
					"        # iteration management\r\n",
					"        # print(f\"grow {i_grow}: found {additional_plots} additional plots\")\r\n",
					"        i_grow += 1\r\n",
					"\r\n",
					"    return df_plot, df_unassociated"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_unassociated = df_coord.copy()\r\n",
					"unassociated_plots = df_unassociated.shape[0]\r\n",
					"\r\n",
					"df_region = pd.DataFrame(columns=['region','plant','x','y','idx','grow_iteration','direction'])\r\n",
					"\r\n",
					"while unassociated_plots > 0:\r\n",
					"\r\n",
					"    df_new_region = df_unassociated.groupby('plant').min('idx')\r\n",
					"    df_new_region.reset_index(inplace=True)\r\n",
					"    df_new_region['region'] = df_new_region.index\r\n",
					"    df_new_region = df_new_region.reindex(columns=['region', 'plant', 'x', 'y', 'idx'])\r\n",
					"    df_new_region['grow_iteration'] = 0\r\n",
					"    df_new_region['direction'] = [['u','d','l','r']] * df_new_region.shape[0]\r\n",
					"    # df_new_region.head()\r\n",
					"\r\n",
					"    # build region from initial plot\r\n",
					"    df_new_region, df_unassociated = build_region(df_new_region, df_unassociated)\r\n",
					"    # add region to list \r\n",
					"    df_region = pd.concat([df_region, df_new_region])\r\n",
					"\r\n",
					"    # iteration management\r\n",
					"    unassociated_plots = df_unassociated.shape[0]"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_region.sort_values(by = ['region', 'plant', 'x', 'y']).head(30)"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_region[['x', 'y', 'plant']].set_index(['y', 'x']).unstack()"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_new_region = df_unassociated.groupby('plant').min('idx')\r\n",
					"df_new_region.reset_index(inplace=True)\r\n",
					"df_new_region['region'] = df_new_region.index\r\n",
					"df_new_region = df_new_region.reindex(columns=['region', 'plant', 'x', 'y', 'idx'])\r\n",
					"df_new_region['grow_iteration'] = 0\r\n",
					"df_new_region['direction'] = [['u','d','l','r']] * df_new_region.shape[0]\r\n",
					"df_new_region.head()"
				],
				"execution_count": 55
			}
		]
	}
}