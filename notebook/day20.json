{
	"name": "day20",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "carlsmall",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "81fcb2e0-d718-49bc-b49b-82c115b5e707"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d3313606-ce08-408b-8d6e-0965e2fba137/resourceGroups/rg_carl_follows/providers/Microsoft.Synapse/workspaces/asa-wks-carl-follows/bigDataPools/carlsmall",
				"name": "carlsmall",
				"type": "Spark",
				"endpoint": "https://asa-wks-carl-follows.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/carlsmall",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"x_tiles = 141\r\n",
					"\r\n",
					"col_specs = []\r\n",
					"for i in range(x_tiles):\r\n",
					"    col_specs.append((i, i+1))\r\n",
					"\r\n",
					"df_input = pd.read_fwf(\"abfss://fsn-carl-follows@adlscarlfollows.dfs.core.windows.net/day20/test_input.txt\"\\\r\n",
					"                    , header=None\\\r\n",
					"                    , index_col=False\\\r\n",
					"                    , colspecs=col_specs)\r\n",
					"df_input.columns = range(0, len(df_input.columns))\r\n",
					"\r\n",
					"y_tiles = df_input.shape[0]\r\n",
					"df_input.head(20)"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# pivot to list of coordinates\r\n",
					"df_racetrack = df_input.stack().to_frame().rename_axis(index=('y','x'))\r\n",
					"df_racetrack.columns = ['contents']\r\n",
					"\r\n",
					"#find the start\r\n",
					"start_xy = df_racetrack[df_racetrack['contents'] == 'S']\r\n",
					"start_y = start_xy.index[0][0]\r\n",
					"start_x = start_xy.index[0][1]\r\n",
					"print(f\" Start at ({start_y},{start_x})\")\r\n",
					"\r\n",
					"df_racetrack.head()"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def move(y, x, df_track):\r\n",
					"\r\n",
					"    locations = [(y-1,x),(y,x+1),(y+1,x),(y,x-1)]\r\n",
					"    df_track = df_racetrack[df_racetrack.index.isin(locations) & (df_racetrack['contents'] == '.')]\r\n",
					"    if df_track.shape[0] > 0:\r\n",
					"        _can_move = True\r\n",
					"        _pos = df_track.index\r\n",
					"    else:\r\n",
					"        df_track = df_racetrack[df_racetrack.index.isin(locations) & (df_racetrack['contents'] == 'E')]\r\n",
					"        _can_move = False\r\n",
					"        _pos = df_track.index\r\n",
					"\r\n",
					"    return _can_move, _pos"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"can_move = True\r\n",
					"cur_x = start_x\r\n",
					"cur_y = start_y\r\n",
					"pico_seconds = 0\r\n",
					"\r\n",
					"while can_move:\r\n",
					"    can_move, cur_yx = move(cur_y, cur_x, df_racetrack)\r\n",
					"    cur_y = cur_yx[0][0]\r\n",
					"    cur_x = cur_yx[0][1]\r\n",
					"    # print(f\" Currently at ({cur_y},{cur_x})\")\r\n",
					"\r\n",
					"    pico_seconds += 1\r\n",
					"    df_racetrack.loc[cur_yx] = pico_seconds"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_racetrack.unstack()"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def adj_y(row):\r\n",
					"    if row['urdl'] == 'u':\r\n",
					"        row['wall_x'] = row['x']\r\n",
					"        row['wall_y'] = row['y'] - 1\r\n",
					"        row['y'] = row['y'] - 2\r\n",
					"    elif row['urdl'] == 'r':\r\n",
					"        row['wall_x'] = row['x'] + 1\r\n",
					"        row['wall_y'] = row['y']\r\n",
					"        row['x'] = row['x'] + 2\r\n",
					"    elif row['urdl'] == 'd':\r\n",
					"        row['wall_x'] = row['x']\r\n",
					"        row['wall_y'] = row['y'] + 1\r\n",
					"        row['y'] = row['y'] + 2\r\n",
					"    elif row['urdl'] == 'l':\r\n",
					"        row['wall_x'] = row['x'] - 1\r\n",
					"        row['wall_y'] = row['y']\r\n",
					"        row['x'] = row['x'] - 2\r\n",
					"    \r\n",
					"    return row\r\n",
					"\r\n",
					"# adj_y(df_racetrack_exp.iloc[0])"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_walls = df_racetrack[df_racetrack['contents'] == '#'].copy()\r\n",
					"\r\n",
					"df_racetrack_xy = df_racetrack[df_racetrack['contents'] != '#'].copy()\r\n",
					"df_racetrack_xy.loc[start_xy.index] = 0\r\n",
					"df_racetrack_xy.reset_index(inplace=True)\r\n",
					"df_racetrack_xy.rename(columns={'contents': 'pico_seconds'}, inplace=True)\r\n",
					"df_racetrack_xy['pico_seconds'].apply(int)\r\n",
					"df_racetrack_xy.head()"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_racetrack_exp = df_racetrack_xy.copy()\r\n",
					"df_racetrack_exp['urdl'] = [['u','r','d','l']] * df_racetrack_exp.shape[0]\r\n",
					"df_racetrack_exp = df_racetrack_exp.explode('urdl')\r\n",
					"df_racetrack_exp = df_racetrack_exp.apply(adj_y, axis=1)\r\n",
					"df_racetrack_exp.head(10)"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_cheats = df_racetrack_xy.merge(df_racetrack_exp, how='inner', left_on=['y','x'], right_on=['y','x'], suffixes=('','_exp'))\r\n",
					"df_cheats['saving'] = df_cheats['pico_seconds_exp'] - df_cheats['pico_seconds'] - 2\r\n",
					"\r\n",
					"# check a wall en route\r\n",
					"df_wall_cheats = df_cheats.merge(df_walls, how='inner', left_on=['wall_y','wall_x'], right_on=['y','x'], suffixes=('','_wall'))\r\n",
					"\r\n",
					"# check for savings\r\n",
					"df_good_cheats = df_wall_cheats[df_wall_cheats['saving'] >= 10]\r\n",
					"# df_good_cheats.sort_values('saving', ascending=True).head(50)\r\n",
					"\r\n",
					"# report \r\n",
					"df_results = df_good_cheats.groupby('saving')['pico_seconds'].count().to_frame()\r\n",
					"df_results.rename(columns={'pico_seconds': 'count'}, inplace=True)\r\n",
					"df_results.head(10)"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# 1364 - too low\r\n",
					"# 4166 - too high\r\n",
					"df_results[df_results.index >= 100]['count'].sum()"
				],
				"execution_count": 36
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Part 2"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"end_ps = df_racetrack_xy['pico_seconds'].max()\r\n",
					"\r\n",
					"cheat_specs = []\r\n",
					"for i in range(-20, 21):\r\n",
					"    cheat_specs.append((i))"
				],
				"execution_count": 99
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_racetrack_xy_p2 = df_racetrack_xy[(df_racetrack_xy['pico_seconds'] > 0) & (df_racetrack_xy['pico_seconds'] < end_ps)].copy()\r\n",
					"df_racetrack_xy_p2['x_plus_y'] = df_racetrack_xy_p2['x'] + df_racetrack_xy_p2['y']\r\n",
					"df_racetrack_xy_p2['cheat_specs'] = [cheat_specs] * df_racetrack_xy_p2.shape[0]\r\n",
					"df_racetrack_xy_p2 = df_racetrack_xy_p2.explode('cheat_specs')\r\n",
					"df_racetrack_xy_p2.reset_index(inplace=True, drop=True)\r\n",
					"df_racetrack_xy_p2['x_plus_y_cheat'] = df_racetrack_xy_p2['x_plus_y'] + df_racetrack_xy_p2['cheat_specs']\r\n",
					"df_racetrack_xy_p2.head(10)"
				],
				"execution_count": 100
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_shortcuts_p2 = df_racetrack_xy_p2.merge(df_racetrack_xy_p2, how='inner', left_on='x_plus_y_cheat', right_on='x_plus_y', suffixes=('','_move'))\r\n",
					"#df_shortcuts_p2.head()\r\n",
					"\r\n",
					"df_shortcuts_p2 = df_shortcuts_p2.groupby(['y','x','pico_seconds','y_move','x_move'])['pico_seconds_move'].min().to_frame()\r\n",
					"#df_results_p2.set_index(['y','x'], inplace=True)\r\n",
					"df_shortcuts_p2.reset_index(inplace=True)\r\n",
					"df_shortcuts_p2['saving'] = df_shortcuts_p2['pico_seconds_move'] - df_shortcuts_p2['pico_seconds'] \r\n",
					"df_shortcuts_p2 = df_shortcuts_p2[df_shortcuts_p2['saving']>=50]\r\n",
					"\r\n",
					"df_results_p2 = df_shortcuts_p2.groupby(['saving'])['pico_seconds_move'].count().to_frame()\r\n",
					"df_results_p2.head(20)"
				],
				"execution_count": 101
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_inspect_p2 = df_shortcuts_p2[df_shortcuts_p2['saving'] == 51]\r\n",
					"df_inspect_p2.head()"
				],
				"execution_count": 105
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}