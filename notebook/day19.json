{
	"name": "day19",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "carlsmall",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9a0465cb-7626-4634-ba92-44a4767a356d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d3313606-ce08-408b-8d6e-0965e2fba137/resourceGroups/rg_carl_follows/providers/Microsoft.Synapse/workspaces/asa-wks-carl-follows/bigDataPools/carlsmall",
				"name": "carlsmall",
				"type": "Spark",
				"endpoint": "https://asa-wks-carl-follows.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/carlsmall",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd"
				],
				"execution_count": 218
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_input_1 = pd.read_fwf(\"abfss://fsn-carl-follows@adlscarlfollows.dfs.core.windows.net/day19/input_1.txt\"\\\r\n",
					"                    , header=None\\\r\n",
					"                    , index_col=False\\\r\n",
					"                    , names=['towels']\r\n",
					"                    , colspecs=[[0,5000]])\r\n",
					"\r\n",
					"df_input_2 = pd.read_fwf(\"abfss://fsn-carl-follows@adlscarlfollows.dfs.core.windows.net/day19/input_2.txt\"\\\r\n",
					"                    , header=None\\\r\n",
					"                    , index_col=False\\\r\n",
					"                    , names=['design']\r\n",
					"                    , colspecs=[[0,100]])"
				],
				"execution_count": 219
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_designs = df_input_2.copy()\r\n",
					"df_designs['unmatched'] = df_designs['design']\r\n",
					"df_designs['design_id'] = df_designs.index\r\n",
					"df_designs['sequence_mapped'] = False\r\n",
					"df_designs['colour_sequence'] = ''\r\n",
					"df_designs.head()"
				],
				"execution_count": 210
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"towels_str = str(df_input_1.iloc[0,0])\r\n",
					"df_towels = pd.DataFrame(list(towels_str.split(',')), columns=['colours'])\r\n",
					"df_towels.index.name = 'towel_id'\r\n",
					"df_towels[\"colours\"] = df_towels['colours'].str.strip()\r\n",
					"df_towels[\"stripes\"] = df_towels['colours'].apply(len)\r\n",
					"\r\n",
					"max_stripe = df_towels[\"stripes\"].max()\r\n",
					"stripes = list(range(1, max_stripe+1))\r\n",
					"df_towels.head()"
				],
				"execution_count": 211
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def match_towel(df_d, df_t):\r\n",
					"    \r\n",
					"    #df_d['look_for_stripes'] = [stripes] * df_d.shape[0]\r\n",
					"    df_d['look_for_stripes'] = df_d.apply(lambda row: stripes if row.sequence_mapped == False else 0, axis=1)\r\n",
					"    df_d = df_d.explode('look_for_stripes')\r\n",
					"    df_d['look_for_colours'] = df_d.apply(lambda row: row.unmatched[:row.look_for_stripes], axis=1)\r\n",
					"    df_d['new_unmatched'] = df_d.apply(lambda row: row.unmatched[row.look_for_stripes:], axis=1)\r\n",
					"\r\n",
					"    df_match = df_d.merge(df_t, how='left', left_on=['look_for_colours','look_for_stripes'], right_on=['colours','stripes'], suffixes=('', '_clr'), indicator = True)\r\n",
					"    df_match = df_match[(df_match['_merge'] == 'both') | ((df_match['_merge'] == 'left_only') & (df_match['sequence_mapped'] == True))]\r\n",
					"    df_match['colour_sequence'] = df_match.apply(lambda row: row.colour_sequence if row.sequence_mapped == True else row.colour_sequence + ',' + row.colours, axis=1)\r\n",
					"    df_match = df_match[['design_id','design','sequence_mapped','colour_sequence','new_unmatched']]\r\n",
					"    df_match.columns = ('design_id','design','sequence_mapped','colour_sequence','unmatched')\r\n",
					"\r\n",
					"    df_match['sequence_mapped'] = df_match.apply(lambda row: True if row.unmatched == '' else False, axis=1)\r\n",
					"\r\n",
					"    us_count = df_match[df_match['sequence_mapped']==False].shape[0]\r\n",
					"\r\n",
					"    return df_match, us_count"
				],
				"execution_count": 212
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"unmapped_sequence = df_designs[df_designs['sequence_mapped']==False].shape[0]\r\n",
					"\r\n",
					"while unmapped_sequence > 0:\r\n",
					"    df_designs, unmapped_sequence = match_towel(df_designs, df_towels)\r\n",
					"\r\n",
					"df_designs.head(20)\r\n",
					"    "
				],
				"execution_count": 213
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_mapped_designs = df_designs.groupby(['design_id','design'])['colour_sequence'].count().to_frame()\r\n",
					"df_mapped_designs.shape[0]"
				],
				"execution_count": 217
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Development"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_d = df_designs\r\n",
					"#df_d['look_for_stripes'] = [stripes] * df_d.shape[0]\r\n",
					"df_d['look_for_stripes'] = df_d.apply(lambda row: stripes if row.sequence_mapped == False else 0, axis=1)\r\n",
					"df_d = df_d.explode('look_for_stripes')\r\n",
					"df_d['look_for_colours'] = df_d.apply(lambda row: row.unmatched[:row.look_for_stripes], axis=1)\r\n",
					"df_d['new_unmatched'] = df_d.apply(lambda row: row.unmatched[row.look_for_stripes:], axis=1)\r\n",
					"df_d.head(20)\r\n",
					""
				],
				"execution_count": 201
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_t = df_towels\r\n",
					"\r\n",
					"df_match = df_d.merge(df_t, how='left', left_on=['look_for_colours'], right_on=['colours'], suffixes=('', '_clr'), indicator = True)\r\n",
					"df_match = df_match[(df_match['_merge'] == 'both') | ((df_match['_merge'] == 'left_only') & (df_match['sequence_mapped'] == True))]\r\n",
					"df_match['colour_sequence'] = df_match['colour_sequence'] + ',' + df_match['colours']\r\n",
					"df_match = df_match[['design_id','design','sequence_mapped','colour_sequence','new_unmatched']]\r\n",
					"df_match.columns = ('design_id','design','sequence_mapped','colour_sequence','unmatched')\r\n",
					"df_match.head(20)\r\n",
					""
				],
				"execution_count": 110
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Messing around"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def match_pattern(pattern, df_t):\r\n",
					"\r\n",
					"    df_towels['pattern'] = pattern\r\n",
					"    return pattern"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pattern = 'rrbgbr'\r\n",
					"df_towels['pattern'] = pattern\r\n",
					"df_towels.head()"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"match_pattern('rrbgbr', df_towels)"
				],
				"execution_count": 40
			}
		]
	}
}