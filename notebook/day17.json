{
	"name": "day17",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "carlsmall",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7b4c3dd1-1542-4ba5-9aad-4994b05302c7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d3313606-ce08-408b-8d6e-0965e2fba137/resourceGroups/rg_carl_follows/providers/Microsoft.Synapse/workspaces/asa-wks-carl-follows/bigDataPools/carlsmall",
				"name": "carlsmall",
				"type": "Spark",
				"endpoint": "https://asa-wks-carl-follows.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/carlsmall",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import math"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_operand(operand, is_combo, ra, rb, rc):\r\n",
					"\r\n",
					"    o = -1\r\n",
					"    if is_combo==False:\r\n",
					"        o = operand\r\n",
					"    elif operand in range(4):\r\n",
					"        o = operand\r\n",
					"    elif operand == 4:\r\n",
					"        o = ra\r\n",
					"    elif operand == 5:\r\n",
					"        o = rb\r\n",
					"    elif operand == 6:\r\n",
					"        o = rc\r\n",
					"    elif operand == 7:\r\n",
					"        print(\"error\")\r\n",
					"    else:\r\n",
					"        print(\"out of range error\")\r\n",
					"\r\n",
					"    return int(o)"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def perform_instruction(opcode, operand, ip, aj, ra, rb, rc):\r\n",
					"\r\n",
					"    #print (f\"opcode {opcode}\")\r\n",
					"    out = -1\r\n",
					"\r\n",
					"    if opcode == 0:\r\n",
					"        o = get_operand(operand, True, ra, rb, rc)\r\n",
					"        ra_pre = ra\r\n",
					"        ra = math.floor( ra / pow(2, o) )\r\n",
					"        #print(f\"adv: divide {ra_pre} by 2 ^ {o}, register_a = {ra}\")\r\n",
					"    elif opcode == 1:\r\n",
					"        o = get_operand(operand, False, ra, rb, rc)\r\n",
					"        rb_pre = rb\r\n",
					"        rb = rb ^ o\r\n",
					"        #print(f\"bxl: bitwise {rb_pre} XOR {o}, register_b = {rb}\")\r\n",
					"    elif opcode == 2:\r\n",
					"        o = get_operand(operand, True, ra, rb, rc)\r\n",
					"        rb = o % 8\r\n",
					"        #print(f\"bst: {o} modulo 8, register_b = {rb}\")\r\n",
					"    elif opcode == 3:\r\n",
					"        o = get_operand(operand, False, ra, rb, rc)\r\n",
					"        if ra != 0:\r\n",
					"            #print(f\"jnz: jump to {o} \")\r\n",
					"            ip = o\r\n",
					"            aj = False\r\n",
					"        #else:\r\n",
					"            #print(f\"jnz: no jump \")\r\n",
					"    elif opcode == 4:\r\n",
					"        o = get_operand(operand, False, ra, rb, rc)\r\n",
					"        rb_pre = rb\r\n",
					"        rb = rb ^ rc\r\n",
					"        #print(f\"bxc: bitwise {rb_pre} XOR {rc}, register_b = {rb}\")\r\n",
					"    elif opcode == 5:\r\n",
					"        o = get_operand(operand, True, ra, rb, rc)\r\n",
					"        out = o % 8\r\n",
					"        #print(f\"out: {o} modulo 8, output = {out}\")\r\n",
					"    elif opcode == 6:\r\n",
					"        o = get_operand(operand, True, ra, rb, rc)\r\n",
					"        rb = math.floor( ra / pow(2, o) )\r\n",
					"        #print(f\"bdv: divide {ra} by 2 ^ {o}, register_b = {rb}\")\r\n",
					"    elif opcode == 7:\r\n",
					"        o = get_operand(operand, True, ra, rb, rc)\r\n",
					"        rc = math.floor( ra / pow(2, o) )\r\n",
					"        #print(f\"cdv: divide {ra} by 2 ^ {o}, register_c = {rc}\")\r\n",
					"\r\n",
					"    return out, ip, ra, rb, rc, aj\r\n",
					""
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"source": [
					"# part A test\r\n",
					"register_a = 729\r\n",
					"register_b = 0\r\n",
					"register_c = 0\r\n",
					"\r\n",
					"program = '0,1,5,4,3,0'\r\n",
					"program_list = program.split(',')"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# part A\r\n",
					"register_a = 30878003\r\n",
					"register_b = 0\r\n",
					"register_c = 0\r\n",
					"\r\n",
					"program = '2,4,1,2,7,5,0,3,4,7,1,7,5,5,3,0'\r\n",
					"program_list = program.split(',')"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"instruction_pointer = 0\r\n",
					"instruction_available = True\r\n",
					"output_list = []\r\n",
					"i = 0\r\n",
					"\r\n",
					"while (instruction_available == True) & (i < 1000):\r\n",
					"\r\n",
					"    opcode = int(program_list[instruction_pointer])\r\n",
					"    operand = int(program_list[instruction_pointer + 1])\r\n",
					"    auto_jump = True\r\n",
					"    #print(f\"opcode: {opcode}, operand: {operand}, instruction_pointer: {instruction_pointer}\")\r\n",
					"\r\n",
					"    output, instruction_pointer, register_a, register_b, register_c, auto_jump = perform_instruction(opcode, operand, instruction_pointer, auto_jump, register_a, register_b, register_c)\r\n",
					"\r\n",
					"    if output >= 0:\r\n",
					"        output_list += [output]\r\n",
					"\r\n",
					"    # iteration management\r\n",
					"    if auto_jump == True:\r\n",
					"        instruction_pointer += 2\r\n",
					"\r\n",
					"    if instruction_pointer >= len(program_list):\r\n",
					"        instruction_available = False\r\n",
					"\r\n",
					"    i += 1\r\n",
					"\r\n",
					"final_output = ','.join([str(o) for o in output_list])\r\n",
					"print (final_output)"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def run_program(register_a, program):\r\n",
					"    register_b = 0\r\n",
					"    register_c = 0\r\n",
					"    program_list = program.split(',')\r\n",
					"    instruction_pointer = 0\r\n",
					"    instruction_available = True\r\n",
					"    output_list = []\r\n",
					"    i = 0\r\n",
					"\r\n",
					"    while (instruction_available == True) & (i < 1000):\r\n",
					"\r\n",
					"        opcode = int(program_list[instruction_pointer])\r\n",
					"        operand = int(program_list[instruction_pointer + 1])\r\n",
					"        auto_jump = True\r\n",
					"        #print(f\"opcode: {opcode}, operand: {operand}, instruction_pointer: {instruction_pointer}\")\r\n",
					"\r\n",
					"        output, instruction_pointer, register_a, register_b, register_c, auto_jump = perform_instruction(opcode, operand, instruction_pointer, auto_jump, register_a, register_b, register_c)\r\n",
					"\r\n",
					"        if output >= 0:\r\n",
					"            output_list += [output]\r\n",
					"\r\n",
					"        # iteration management\r\n",
					"        if auto_jump == True:\r\n",
					"            instruction_pointer += 2\r\n",
					"\r\n",
					"        if instruction_pointer >= len(program_list):\r\n",
					"            instruction_available = False\r\n",
					"\r\n",
					"        i += 1\r\n",
					"\r\n",
					"    return ','.join([str(o) for o in output_list])"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# part b \r\n",
					"program = '2,4,1,2,7,5,0,3,4,7,1,7,5,5,3,0'\r\n",
					"no_match = True\r\n",
					"\r\n",
					"reg_a = 190384113200000    \r\n",
					"incr = 1\r\n",
					"chk = -31\r\n",
					"\r\n",
					"reg_a = 100000000000000\r\n",
					"incr = 1000000000000\r\n",
					"chk = -3\r\n",
					"\r\n",
					"while (no_match):\r\n",
					"\r\n",
					"    output = run_program(reg_a, program)\r\n",
					"    if program == output:\r\n",
					"        no_match = False\r\n",
					"    \r\n",
					"        print(f\"running reg_a: {reg_a} returned: {output}\")\r\n",
					"    else:\r\n",
					"        if (reg_a % (incr * 100) == 0):\r\n",
					"            print(f\"at reg_a: {reg_a}  {output}\")\r\n",
					"        elif (output[chk:] == program[chk:]):\r\n",
					"            if incr >= 10:\r\n",
					"                incr = int(incr / 10)\r\n",
					"                chk =chk - 2\r\n",
					"            print(f\"running reg_a: {reg_a} returned: {output}\")\r\n",
					"        \r\n",
					"    reg_a += incr\r\n",
					""
				],
				"execution_count": 94
			}
		]
	}
}