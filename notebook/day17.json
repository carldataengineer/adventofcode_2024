{
	"name": "day17",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "carlsmall",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "03776ab7-c7f7-497b-be48-65d48b102595"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d3313606-ce08-408b-8d6e-0965e2fba137/resourceGroups/rg_carl_follows/providers/Microsoft.Synapse/workspaces/asa-wks-carl-follows/bigDataPools/carlsmall",
				"name": "carlsmall",
				"type": "Spark",
				"endpoint": "https://asa-wks-carl-follows.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/carlsmall",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import math"
				],
				"execution_count": 114
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_operand(operand, is_combo):\r\n",
					"\r\n",
					"    o = -1\r\n",
					"    if is_combo==False:\r\n",
					"        o = operand\r\n",
					"    elif operand in range(4):\r\n",
					"        o = operand\r\n",
					"    elif operand == 4:\r\n",
					"        o = register_a\r\n",
					"    elif operand == 5:\r\n",
					"        o = register_b\r\n",
					"    elif operand == 6:\r\n",
					"        o = register_c\r\n",
					"    elif operand == 7:\r\n",
					"        print(\"error\")\r\n",
					"    else:\r\n",
					"        print(\"out of range error\")\r\n",
					"\r\n",
					"    return o"
				],
				"execution_count": 115
			},
			{
				"cell_type": "code",
				"source": [
					"register_a = 729\r\n",
					"register_b = 0\r\n",
					"register_c = 0\r\n",
					"\r\n",
					"program = '0,1,5,4,3,0'\r\n",
					"program_list = program.split(',')"
				],
				"execution_count": 116
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def perform_instruction(opcode, operand, ip, aj, ra, rb, rc):\r\n",
					"\r\n",
					"    out = -1\r\n",
					"\r\n",
					"    if opcode == 0:\r\n",
					"        o = get_operand(operand, is_combo=True)\r\n",
					"        ra = math.floor( ra / pow(2, o) )\r\n",
					"        print(f\"adv: divide {ra} by 2 ^ {o}, register_a = {ra}\")\r\n",
					"    elif opcode == 1:\r\n",
					"        o = get_operand(operand, is_combo=False)\r\n",
					"        rb = rb ^ o\r\n",
					"        print(f\"bxl: bitwise {rb} XOR {o}, register_b = {rb}\")\r\n",
					"    elif opcode == 2:\r\n",
					"        o = get_operand(operand, is_combo=True)\r\n",
					"        rb = o % 8\r\n",
					"        print(f\"bst: {o} modulo 8, register_b = {rb}\")\r\n",
					"    elif opcode == 3:\r\n",
					"        o = get_operand(operand, is_combo=False)\r\n",
					"        if ra != 0:\r\n",
					"            print(f\"jnz: jump to {o} \")\r\n",
					"            ip = o\r\n",
					"            aj = False\r\n",
					"        else:\r\n",
					"            print(f\"jnz: no jump \")\r\n",
					"    elif opcode == 4:\r\n",
					"        o = get_operand(operand, is_combo=False)\r\n",
					"        rb = rb ^ rc\r\n",
					"        print(f\"bxc: bitwise {rb} XOR {rc}, register_b = {rb}\")\r\n",
					"    elif opcode == 5:\r\n",
					"        o = get_operand(operand, is_combo=True)\r\n",
					"        out = o % 8\r\n",
					"        print(f\"out: {o} modulo 8, output = {out}\")\r\n",
					"    elif opcode == 6:\r\n",
					"        o = get_operand(operand, is_combo=True)\r\n",
					"        rb = math.floor( ra / pow(2, o) )\r\n",
					"        print(f\"bdv: divide {ra} by 2 ^ {o}, register_b = {rb}\")\r\n",
					"    elif opcode == 7:\r\n",
					"        o = get_operand(operand, is_combo=True)\r\n",
					"        rc = math.floor( ra / pow(2, o) )\r\n",
					"        print(f\"cdv: divide {ra} by 2 ^ {o}, register_c = {rc}\")\r\n",
					"\r\n",
					"    return out, ra, rb, rc, aj\r\n",
					""
				],
				"execution_count": 117
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"register_a = 10\r\n",
					"register_b = 0\r\n",
					"register_c = 0\r\n",
					"\r\n",
					"program = '5,0,5,1,5,4'\r\n",
					"program_list = program.split(',')"
				],
				"execution_count": 119
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"register_b = 10\r\n",
					"register_b = 1\r\n",
					"register_c = 9\r\n",
					"opcode = 2\r\n",
					"operand = 6\r\n",
					"instruction_pointer = 0\r\n",
					"auto_jump = True\r\n",
					"output, register_a, register_b, register_c, auto_jump = perform_instruction(5, 4, 0, True, register_a, register_b, register_c)\r\n",
					"\r\n",
					"print (f\"output: {output}, register_a: {register_a}, register_b: {register_b}, register_c: {register_c}, auto_jump {str(auto_jump)}\")"
				],
				"execution_count": 118
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"instruction_pointer = 0\r\n",
					"instruction_available = True\r\n",
					"auto_jump = True\r\n",
					"output_list = []\r\n",
					"\r\n",
					"while instruction_available == True:\r\n",
					"\r\n",
					"    opcode = program_list[instruction_pointer]\r\n",
					"    operand = program_list[instruction_pointer + 1]\r\n",
					"    print(f\"opcode_pointer: {instruction_pointer}, opcode: {opcode}, operand: {operand}\")\r\n",
					"\r\n",
					"    output, register_a, register_b, register_c, auto_jump = perform_instruction(opcode, operand, instruction_pointer, auto_jump, register_a, register_b, register_c)\r\n",
					"\r\n",
					"    if output > 0:\r\n",
					"        output_list += [output]\r\n",
					"\r\n",
					"    # iteration management\r\n",
					"    if auto_jump == True:\r\n",
					"        instruction_pointer += 2\r\n",
					"\r\n",
					"    if instruction_pointer >= len(program_list):\r\n",
					"        instruction_available = False\r\n",
					"\r\n",
					"print (output_list)"
				],
				"execution_count": 121
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}