{
	"name": "day10",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "carlsmall",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9044b820-70b7-4876-9b80-6b660e117e9b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d3313606-ce08-408b-8d6e-0965e2fba137/resourceGroups/rg_carl_follows/providers/Microsoft.Synapse/workspaces/asa-wks-carl-follows/bigDataPools/carlsmall",
				"name": "carlsmall",
				"type": "Spark",
				"endpoint": "https://asa-wks-carl-follows.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/carlsmall",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"col_specs = []\r\n",
					"\r\n",
					"for i in range(8):\r\n",
					"    col_specs.append((i, i+1))\r\n",
					"\r\n",
					"df_input = pd.read_fwf(\"abfss://fsn-carl-follows@adlscarlfollows.dfs.core.windows.net/day10/input.txt\"\\\r\n",
					"                    , header=None\\\r\n",
					"                    , index_col=False\\\r\n",
					"                    , colspecs=col_specs)\r\n",
					"\r\n",
					"df_input.columns = range(0, len(df_input.columns))\r\n",
					"df_input.head(10)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# pivot to list of coordinates\r\n",
					"df_coord = df_input.stack().to_frame().rename_axis(index=('y','x'))\r\n",
					"df_coord.columns = ['height']\r\n",
					"\r\n",
					"# filter to trailheads\r\n",
					"df_trailheads = df_coord[df_coord['height'] == 0].copy().reset_index()\r\n",
					"df_trailheads.index.name = 'trailhead_id'\r\n",
					"\r\n",
					"df_coord.reset_index(inplace=True)\r\n",
					"\r\n",
					"df_trailheads.head()"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_routes = df_trailheads.copy()\r\n",
					"\r\n",
					"for i in range(1, 1):\r\n",
					"    print(f\"finding {i}\")\r\n",
					"\r\n",
					"    df_routes['direction'] = [['u','d','l','r']] * df_routes.shape[0]\r\n",
					"    df_routes = df_routes.explode('direction')\r\n",
					""
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def x_step(r):\r\n",
					"    if r['direction'] == 'u':\r\n",
					"        return r['x']\r\n",
					"    elif r['direction'] == 'd':\r\n",
					"        return r['x']\r\n",
					"    elif r['direction'] == 'l':\r\n",
					"        return r['x'] -1\r\n",
					"    elif r['direction'] == 'r':\r\n",
					"        return r['x'] + 1"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def y_step(r):\r\n",
					"    if r['direction'] == 'u':\r\n",
					"        return r['y'] - 1\r\n",
					"    elif r['direction'] == 'd':\r\n",
					"        return r['y'] + 1\r\n",
					"    elif r['direction'] == 'l':\r\n",
					"        return r['y']\r\n",
					"    elif r['direction'] == 'r':\r\n",
					"        return r['y']"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_routes['direction'] = [['u','d','l','r']] * df_routes.shape[0]\r\n",
					"df_routes = df_routes.explode('direction')\r\n",
					"df_routes['y_step'] = df_routes.apply(y_step, axis=1)\r\n",
					"df_routes['x_step'] = df_routes.apply(x_step, axis=1)\r\n",
					"df_routes.head(20)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_routes = df_routes.merge(df_coord[df_coord['height'] == 1].copy(), how='inner', left_on=['x_step','y_step'], right_on=['x','y'])\r\n",
					"df_routes.head(20)"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}