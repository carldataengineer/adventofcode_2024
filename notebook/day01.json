{
	"name": "day01",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "carlsmall",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "02a5f216-de54-4cc8-b881-c88f1da87904"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d3313606-ce08-408b-8d6e-0965e2fba137/resourceGroups/rg_carl_follows/providers/Microsoft.Synapse/workspaces/asa-wks-carl-follows/bigDataPools/carlsmall",
				"name": "carlsmall",
				"type": "Spark",
				"endpoint": "https://asa-wks-carl-follows.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/carlsmall",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfinput = pd.read_csv(\"abfss://fsn-carl-follows@adlscarlfollows.dfs.core.windows.net/day01/input.txt\"\\\r\n",
					"                    , delimiter= '\\s+'\\\r\n",
					"                    , header=None\\\r\n",
					"                    , index_col=False\\\r\n",
					"                    , names=['location_id_left', 'location_id_right'])\r\n",
					"dfinput.head(5)"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfleft = dfinput[['location_id_left']].sort_values(by='location_id_left').reset_index(drop=True)\r\n",
					"#dfleft.head()\r\n",
					"\r\n",
					"dfright = dfinput[['location_id_right']].sort_values(by='location_id_right').reset_index(drop=True)\r\n",
					"dfright.head()"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfsorted = pd.merge(dfleft, dfright, left_index=True, right_index=True)\r\n",
					"dfsorted['difference'] = dfsorted['location_id_left'] - dfsorted['location_id_right']\r\n",
					"dfsorted['difference'] = dfsorted['difference'].abs()\r\n",
					"dfsorted.head()"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfsorted['difference'].sum()"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfleft_grouped = dfinput.groupby('location_id_left')['location_id_right'].count().reset_index(name='count_left')\r\n",
					"dfleft_grouped.columns = ['location_id', 'count_left']\r\n",
					"#dfleft_grouped.head(10)\r\n",
					"#dfleft_grouped[dfleft_grouped['count_left']>1].head(10)\r\n",
					"\r\n",
					"dfright_grouped = dfinput.groupby('location_id_right')['location_id_left'].count().reset_index(name='count_right')\r\n",
					"dfright_grouped.columns = ['location_id', 'count_right']\r\n",
					"dfright_grouped[dfright_grouped['count_right']>1].head(10)"
				],
				"execution_count": 64
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfleft.columns = ['location_id']\r\n",
					"merged_df = dfleft.merge(dfright_grouped, on='location_id', how='inner')\r\n",
					"merged_df['similarity'] = merged_df['location_id'] * merged_df['count_right'] \r\n",
					"\r\n",
					"merged_df.head()"
				],
				"execution_count": 68
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"merged_df['similarity'].sum()"
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			}
		]
	}
}