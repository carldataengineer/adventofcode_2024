{
	"name": "day09",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "carlsmall",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "200f414a-7a3a-45cd-92ee-15c41a1fba6b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d3313606-ce08-408b-8d6e-0965e2fba137/resourceGroups/rg_carl_follows/providers/Microsoft.Synapse/workspaces/asa-wks-carl-follows/bigDataPools/carlsmall",
				"name": "carlsmall",
				"type": "Spark",
				"endpoint": "https://asa-wks-carl-follows.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/carlsmall",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd\r\n",
					"import math"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_input = pd.read_fwf(\"abfss://fsn-carl-follows@adlscarlfollows.dfs.core.windows.net/day09/test_input.txt\"\\\r\n",
					"                    , header=None\\\r\n",
					"                    , index_col=False\\\r\n",
					"                    , names=['disk_map'])\r\n",
					"\r\n",
					"df_input.head()"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"disk_map = str(df_input.iloc[0,0])\r\n",
					"df_disk_map = pd.DataFrame(list(disk_map), columns=['digit'])\r\n",
					"df_disk_map.index.name = 'map_id'\r\n",
					"df_disk_map"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def map_digit(disk_digit):\r\n",
					"    id_num = math.floor(disk_digit.name / 2)\r\n",
					"    if (int(disk_digit.name) % 2 == 0):\r\n",
					"        return [id_num] * int(disk_digit['digit'])\r\n",
					"    else:\r\n",
					"        return ['.'] * int(disk_digit['digit'])"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_disk_map['block_usage'] = df_disk_map.apply(map_digit, axis=1)\r\n",
					"df_disk_map"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_disk_usage = df_disk_map.explode('block_usage').dropna()\r\n",
					"df_disk_usage.rename(columns={'block_usage': 'space_usage'}, inplace=True)\r\n",
					"#df_disk_usage['id_num'] = df_disk_usage.index\r\n",
					"df_disk_usage.reset_index(inplace=True)\r\n",
					"df_disk_usage.index.name = 'space_id'\r\n",
					"df_disk_usage.head(30)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_files = df_disk_usage[df_disk_usage['space_usage'] != '.'].copy()\r\n",
					"df_files.reset_index(inplace=True)\r\n",
					"df_files.index.name = 'file_space_id'\r\n",
					"max_file_space = df_files.shape[0]\r\n",
					"\r\n",
					"df_files['rev_file_space_id'] = - df_files.index - 1 + max_file_space\r\n",
					"#df_files.iloc[50000:50050,:]\r\n",
					"df_files"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_free_spaces = df_disk_usage[df_disk_usage['space_usage'] == '.'].copy()\r\n",
					"df_swap_free_spaces = df_free_spaces[df_free_spaces.index < max_file_space].copy()\r\n",
					"df_swap_free_spaces.reset_index(inplace=True)\r\n",
					"df_swap_free_spaces['free_space_id'] = df_swap_free_spaces.index\r\n",
					"df_swap_free_spaces"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_swap_spaces = df_swap_free_spaces.merge(df_files, how='left', left_on='free_space_id', right_on='rev_file_space_id', suffixes=('', '_file'))\r\n",
					"df_swap_spaces = df_swap_spaces[['space_id', 'space_usage_file']]\r\n",
					"df_swap_spaces.set_index('space_id', inplace=True)\r\n",
					"df_swap_spaces"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def update_space(space):\r\n",
					"    if space['space_usage'] == '.':\r\n",
					"        return space['space_usage_file']\r\n",
					"    else:\r\n",
					"        return space['space_usage']"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_defrag = df_disk_usage[df_disk_usage.index < max_file_space]\r\n",
					"df_defrag = df_defrag.merge(df_swap_spaces, how='left', left_index=True, right_index=True, suffixes=('', '_swap'))\r\n",
					"df_defrag['updated_space'] = df_defrag.apply(update_space, axis=1)\r\n",
					"df_defrag['checksum'] = df_defrag.index * df_defrag['updated_space']\r\n",
					"df_defrag"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_defrag['checksum'].sum()"
				],
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"part 2"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_disk_map_2 = df_disk_map.copy()"
				],
				"execution_count": 122
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def is_file(disk_digit):\r\n",
					"    if (int(disk_digit.name) % 2 == 0):\r\n",
					"        return True\r\n",
					"    else:\r\n",
					"        return False"
				],
				"execution_count": 123
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_disk_map_2['is_file'] = df_disk_map_2.apply(is_file, axis=1)\r\n",
					"df_disk_map_2.rename(columns={'digit': 'block_size'}, inplace=True)\r\n",
					"df_disk_map_2['block_size'] = df_disk_map_2['block_size'].astype('int64')\r\n",
					"#df_disk_map_2['rev_map_id'] = - df_disk_map_2.index + df_disk_map_2.shape[0] - 1\r\n",
					"#df_disk_map_2.set_index('rev_map_id', inplace=True)\r\n",
					"df_disk_map_2"
				],
				"execution_count": 124
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_processing = df_disk_map_2.copy()"
				],
				"execution_count": 125
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#for i in reversed(df_processing[df_processing['is_file'] == True].index):\r\n",
					"for i in range(18,17,-1):\r\n",
					"\r\n",
					"    file_size = df_processing.loc[i, 'block_size']\r\n",
					"    file = df_processing.loc[i, 'block_usage']\r\n",
					"\r\n",
					"    df_available_spaces = df_processing[(df_processing['block_size'] >= file_size) \r\n",
					"                                        & (df_processing['is_file'] == False)\r\n",
					"                                        & (df_processing.index < i)]\r\n",
					"    if df_available_spaces.shape[0] > 0:\r\n",
					"        idx_space = df_available_spaces.index[0]\r\n",
					"        space_size = df_processing.loc[idx_space, 'block_size']\r\n",
					"        if space_size > file_size:\r\n",
					"            df_new = pd.DataFrame({\r\n",
					"                                    'block_size': [file_size, space_size-file_size],\r\n",
					"                                    'block_usage': [file, ['.']],\r\n",
					"                                    'is_file' : [True, False]\r\n",
					"                                })\r\n",
					"        else:\r\n",
					"            df_new = pd.DataFrame({\r\n",
					"                                    'block_size': [file_size],\r\n",
					"                                    'block_usage': [file],\r\n",
					"                                    'is_file' : [True]\r\n",
					"                                })\r\n",
					"    \r\n",
					"        df_old = pd.DataFrame({\r\n",
					"                                    'block_size': [file_size],\r\n",
					"                                    'block_usage': [['.'] * file_size],\r\n",
					"                                    'is_file' : [False]\r\n",
					"                                })\r\n",
					"\r\n",
					"        print(f\"processing space id: {i} containing: {file}, need {file_size} spaces, found {idx_space} of size {space_size}\")\r\n",
					"        df_processing = pd.concat([df_processing.iloc[:i], df_old, df_processing.iloc[i+1:]]).reset_index(drop=True)\r\n",
					"        df_processing = pd.concat([df_processing.iloc[:idx_space], df_new, df_processing.iloc[idx_space+1:]]).reset_index(drop=True)"
				],
				"execution_count": 126
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_processing"
				],
				"execution_count": 127
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}