{
	"name": "day13",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "carlsmall",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7aba36f7-9275-40d9-84fc-4fb48d0e7f79"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d3313606-ce08-408b-8d6e-0965e2fba137/resourceGroups/rg_carl_follows/providers/Microsoft.Synapse/workspaces/asa-wks-carl-follows/bigDataPools/carlsmall",
				"name": "carlsmall",
				"type": "Spark",
				"endpoint": "https://asa-wks-carl-follows.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/carlsmall",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd\r\n",
					"import math\r\n",
					"import re"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_input = pd.read_fwf(\"abfss://fsn-carl-follows@adlscarlfollows.dfs.core.windows.net/day13/test_input.txt\"\\\r\n",
					"                    , header=None\\\r\n",
					"                    , index_col=False\\\r\n",
					"                    , names=['behaviour']\r\n",
					"                    , colspecs=[[0,50]])\r\n",
					"\r\n",
					"df_input.head()"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def split_behaviour(row):\r\n",
					"    if row['behaviour_title'] == 'Button A':\r\n",
					"        row['title'] = 'button_a_' + row['xy']\r\n",
					"        if row['xy'] == 'x':\r\n",
					"            row['value'] = re.findall(r\"X\\+(\\d*),\\sY\\+(\\d*)\", row['behaviour_value'])[0][0]\r\n",
					"        elif row['xy'] == 'y':\r\n",
					"            row['value'] = re.findall(r\"X\\+(\\d*),\\sY\\+(\\d*)\", row['behaviour_value'])[0][1]\r\n",
					"\r\n",
					"    elif row['behaviour_title'] == 'Button B':\r\n",
					"        row['title'] = 'button_b_' + row['xy']\r\n",
					"        if row['xy'] == 'x':\r\n",
					"            row['value'] = re.findall(r\"X\\+(\\d*),\\sY\\+(\\d*)\", row['behaviour_value'])[0][0]\r\n",
					"        elif row['xy'] == 'y':\r\n",
					"            row['value'] = re.findall(r\"X\\+(\\d*),\\sY\\+(\\d*)\", row['behaviour_value'])[0][1]\r\n",
					"    else:\r\n",
					"        row['title'] = 'prize_' + row['xy']\r\n",
					"        if row['xy'] == 'x':\r\n",
					"            row['value'] = re.findall(r\"X\\=(\\d*),\\sY\\=(\\d*)\", row['behaviour_value'])[0][0]\r\n",
					"        elif row['xy'] == 'y':\r\n",
					"            row['value'] = re.findall(r\"X\\=(\\d*),\\sY\\=(\\d*)\", row['behaviour_value'])[0][1]\r\n",
					"\r\n",
					"    return row"
				],
				"execution_count": 77
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_machine_behavior = df_input.copy()\r\n",
					"df_machine_behavior['machine_id'] = df_machine_behavior.apply(lambda row: math.floor(int(row.name)/3), axis=1)\r\n",
					"df_machine_behavior[['behaviour_title', 'behaviour_value']] = df_machine_behavior['behaviour'].str.split(':', expand=True)\r\n",
					"df_machine_behavior['xy'] = [['x','y']] * df_machine_behavior.shape[0]\r\n",
					"df_machine_behavior = df_machine_behavior.explode('xy')\r\n",
					"df_machine_behavior = df_machine_behavior.apply(split_behaviour, axis=1)\r\n",
					"df_machine_behavior = df_machine_behavior[['machine_id','title','value']].set_index(['machine_id', 'title']).unstack()\r\n",
					"df_machine_behavior.columns = df_machine_behavior.columns.droplevel(0)\r\n",
					"df_machine_behavior = df_machine_behavior.apply(pd.to_numeric)\r\n",
					"df_machine_behavior.head(20)"
				],
				"execution_count": 102
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_machine_behavior['max_ax'] = df_machine_behavior['prize_x'] / df_machine_behavior['button_a_x']\r\n",
					"df_machine_behavior['max_ay'] = df_machine_behavior['prize_y'] / df_machine_behavior['button_a_y']\r\n",
					"df_machine_behavior['max_bx'] = df_machine_behavior['prize_x'] / df_machine_behavior['button_b_x']\r\n",
					"df_machine_behavior['max_by'] = df_machine_behavior['prize_y'] / df_machine_behavior['button_b_y']\r\n",
					"df_machine_behavior['max_a'] = df_machine_behavior[['max_ax','max_ay']].min(axis=1).astype(int)\r\n",
					"df_machine_behavior['max_b'] = df_machine_behavior[['max_bx','max_by']].min(axis=1).astype(int)\r\n",
					"df_machine_behavior = df_machine_behavior.drop(columns=['max_ax', 'max_ay', 'max_bx', 'max_by'])\r\n",
					"df_machine_behavior.head(20)"
				],
				"execution_count": 106
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"solve_machine(df_machine_behavior.loc[0])"
				],
				"execution_count": 112
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def solve_machine(machine_details):\r\n",
					"    machine_details['button_a_x']"
				],
				"execution_count": null
			}
		]
	}
}