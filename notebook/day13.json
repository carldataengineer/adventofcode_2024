{
	"name": "day13",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "carlsmall",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6576278b-00c3-4fda-8c8e-593c0af15e73"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d3313606-ce08-408b-8d6e-0965e2fba137/resourceGroups/rg_carl_follows/providers/Microsoft.Synapse/workspaces/asa-wks-carl-follows/bigDataPools/carlsmall",
				"name": "carlsmall",
				"type": "Spark",
				"endpoint": "https://asa-wks-carl-follows.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/carlsmall",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd\r\n",
					"import math\r\n",
					"import re"
				],
				"execution_count": 288
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_input = pd.read_fwf(\"abfss://fsn-carl-follows@adlscarlfollows.dfs.core.windows.net/day13/input.txt\"\\\r\n",
					"                    , header=None\\\r\n",
					"                    , index_col=False\\\r\n",
					"                    , names=['behaviour']\r\n",
					"                    , colspecs=[[0,50]])\r\n",
					"\r\n",
					"df_input.head()"
				],
				"execution_count": 289
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def split_behaviour(row):\r\n",
					"    if row['behaviour_title'] == 'Button A':\r\n",
					"        row['title'] = 'button_a_' + row['xy']\r\n",
					"        if row['xy'] == 'x':\r\n",
					"            row['value'] = re.findall(r\"X\\+(\\d*),\\sY\\+(\\d*)\", row['behaviour_value'])[0][0]\r\n",
					"        elif row['xy'] == 'y':\r\n",
					"            row['value'] = re.findall(r\"X\\+(\\d*),\\sY\\+(\\d*)\", row['behaviour_value'])[0][1]\r\n",
					"\r\n",
					"    elif row['behaviour_title'] == 'Button B':\r\n",
					"        row['title'] = 'button_b_' + row['xy']\r\n",
					"        if row['xy'] == 'x':\r\n",
					"            row['value'] = re.findall(r\"X\\+(\\d*),\\sY\\+(\\d*)\", row['behaviour_value'])[0][0]\r\n",
					"        elif row['xy'] == 'y':\r\n",
					"            row['value'] = re.findall(r\"X\\+(\\d*),\\sY\\+(\\d*)\", row['behaviour_value'])[0][1]\r\n",
					"    else:\r\n",
					"        row['title'] = 'prize_' + row['xy']\r\n",
					"        if row['xy'] == 'x':\r\n",
					"            row['value'] = re.findall(r\"X\\=(\\d*),\\sY\\=(\\d*)\", row['behaviour_value'])[0][0]\r\n",
					"        elif row['xy'] == 'y':\r\n",
					"            row['value'] = re.findall(r\"X\\=(\\d*),\\sY\\=(\\d*)\", row['behaviour_value'])[0][1]\r\n",
					"\r\n",
					"    return row"
				],
				"execution_count": 290
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_multiples(a,b):\r\n",
					"\r\n",
					"    if a > 100:\r\n",
					"        a=100\r\n",
					"    if b > 100:\r\n",
					"        b=100\r\n",
					"        \r\n",
					"    a_values = []\r\n",
					"    b_values = []\r\n",
					"\r\n",
					"    for i in range(1,a+1):\r\n",
					"        a_values.append(i)\r\n",
					"        df_a = pd.DataFrame(a_values)\r\n",
					"        df_a.columns = ['a']\r\n",
					"        df_a['join_key'] = 0\r\n",
					"    for i in range(1,b+1):\r\n",
					"        b_values.append(i)\r\n",
					"        df_b = pd.DataFrame(b_values)\r\n",
					"        df_b.columns = ['b']\r\n",
					"        df_b['join_key'] = 0\r\n",
					"\r\n",
					"    df_combinations = pd.merge(df_a, df_b, on='join_key')\r\n",
					"    return df_combinations[['a', 'b']]"
				],
				"execution_count": 291
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_machine_behavior = df_input.copy()\r\n",
					"df_machine_behavior['machine_id'] = df_machine_behavior.apply(lambda row: math.floor(int(row.name)/3), axis=1)\r\n",
					"df_machine_behavior[['behaviour_title', 'behaviour_value']] = df_machine_behavior['behaviour'].str.split(':', expand=True)\r\n",
					"df_machine_behavior['xy'] = [['x','y']] * df_machine_behavior.shape[0]\r\n",
					"df_machine_behavior = df_machine_behavior.explode('xy')\r\n",
					"df_machine_behavior = df_machine_behavior.apply(split_behaviour, axis=1)\r\n",
					"df_machine_behavior = df_machine_behavior[['machine_id','title','value']].set_index(['machine_id', 'title']).unstack()\r\n",
					"df_machine_behavior.columns = df_machine_behavior.columns.droplevel(0)\r\n",
					"df_machine_behavior = df_machine_behavior.apply(pd.to_numeric)\r\n",
					"df_machine_behavior_2 = df_machine_behavior.copy()\r\n",
					"#df_machine_behavior.head(20)"
				],
				"execution_count": 292
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_machine_behavior['max_ax'] = df_machine_behavior['prize_x'] / df_machine_behavior['button_a_x']\r\n",
					"df_machine_behavior['max_ay'] = df_machine_behavior['prize_y'] / df_machine_behavior['button_a_y']\r\n",
					"df_machine_behavior['max_bx'] = df_machine_behavior['prize_x'] / df_machine_behavior['button_b_x']\r\n",
					"df_machine_behavior['max_by'] = df_machine_behavior['prize_y'] / df_machine_behavior['button_b_y']\r\n",
					"df_machine_behavior['max_a'] = df_machine_behavior[['max_ax','max_ay']].min(axis=1).astype(int)\r\n",
					"df_machine_behavior['max_b'] = df_machine_behavior[['max_bx','max_by']].min(axis=1).astype(int)\r\n",
					"df_machine_behavior = df_machine_behavior.drop(columns=['max_ax', 'max_ay', 'max_bx', 'max_by'])\r\n",
					"df_machine_behavior.head(20)"
				],
				"execution_count": 293
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def winning_cost(machine_details):\r\n",
					"\r\n",
					"    df_multiples = get_multiples(machine_details['max_a'],machine_details['max_b'])\r\n",
					"    df_multiples['calc_x'] = df_multiples['a']*machine_details['button_a_x'] + df_multiples['b']*machine_details['button_b_x']\r\n",
					"    df_multiples['calc_y'] = df_multiples['a']*machine_details['button_a_y'] + df_multiples['b']*machine_details['button_b_y']\r\n",
					"    \r\n",
					"    df_success = df_multiples[(df_multiples['calc_x']==machine_details['prize_x']) & (df_multiples['calc_y']==machine_details['prize_y'])].copy()\r\n",
					"    df_success['cost'] = df_success['a']*3 + df_success['b']\r\n",
					"    \r\n",
					"    return df_success['cost'].min()"
				],
				"execution_count": 294
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_answer = df_machine_behavior.copy()\r\n",
					"df_answer['winning_cost'] = df_answer.apply(winning_cost, axis= 1)\r\n",
					"df_answer['winning_cost'].sum()"
				],
				"execution_count": 295
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def derive_cost(machine_details):\r\n",
					"\r\n",
					"    ax = machine_details['prize_x'] / machine_details['button_a_x']\r\n",
					"    ay = machine_details['prize_y'] / machine_details['button_a_y']\r\n",
					"\r\n",
					"    bx = machine_details['prize_x'] / machine_details['button_b_x']\r\n",
					"    by = machine_details['prize_y'] / machine_details['button_b_y']\r\n",
					"\r\n",
					"    if (bx == by) & (bx == math.floor(bx)) & (by == math.floor(by)):\r\n",
					"        # if can win on just b then do so\r\n",
					"        a = 0\r\n",
					"        b = int(bx)\r\n",
					"    elif (ax == ay) & (ax == math.floor(ax)) & (ay == math.floor(ay)):\r\n",
					"        # if can win on just a then do so\r\n",
					"        a = int(ax)\r\n",
					"        b = 0\r\n",
					"    else:\r\n",
					"        b = ((machine_details['prize_y'] * machine_details['button_a_x']) - (machine_details['prize_x'] * machine_details['button_a_y'])) / ((machine_details['button_a_x'] * machine_details['button_b_y']) - (machine_details['button_b_x'] * machine_details['button_a_y']))\r\n",
					"\r\n",
					"        if b != math.floor(b):\r\n",
					"            a = 0\r\n",
					"            b = 0\r\n",
					"        else:\r\n",
					"            a = int((machine_details['prize_x'] - (machine_details['button_b_x'] * b)) / machine_details['button_a_x'])\r\n",
					"            b = int(b)\r\n",
					"\r\n",
					"        if (a*machine_details['button_a_x'] + b*machine_details['button_b_x']) != machine_details['prize_x']:\r\n",
					"            a = 0\r\n",
					"            b = 0\r\n",
					"        elif (a*machine_details['button_a_y'] + b*machine_details['button_b_y']) != machine_details['prize_y']:\r\n",
					"            a = 0\r\n",
					"            b = 0\r\n",
					"\r\n",
					"    machine_details['derive_a'] = a\r\n",
					"    machine_details['derive_b'] = b\r\n",
					"    machine_details['derive_cost'] = 3*a+b\r\n",
					"\r\n",
					"    return machine_details"
				],
				"execution_count": 338
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_answer_2 = df_machine_behavior_2.copy()\r\n",
					"df_answer_2['prize_x'] = df_answer_2['prize_x'] + 10000000000000\r\n",
					"df_answer_2['prize_y'] = df_answer_2['prize_y'] + 10000000000000\r\n",
					"#df_answer_2.loc[len(df_answer_2)] = [1,2,1,2,10,20]\r\n",
					"\r\n",
					"df_answer_2 = df_answer_2.apply(derive_cost, axis=1)\r\n",
					"df_answer_2.head()"
				],
				"execution_count": 339
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# 875318608908 -- too low\r\n",
					"# 104689813275846 -- too high\r\n",
					"# 103570327981381 -- removed where check failed (float fun)\r\n",
					"df_answer_2['derive_cost'].sum()"
				],
				"execution_count": 340
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_check = df_answer_2[df_answer_2['derive_a'] != 0].copy()\r\n",
					"\r\n",
					"df_check['check_x'] = df_check['prize_x'] - (df_check['button_a_x'] * df_check['derive_a']) - (df_check['button_b_x'] * df_check['derive_b'])\r\n",
					"df_check['check_y'] = df_check['prize_y'] - (df_check['button_a_y'] * df_check['derive_a']) - (df_check['button_b_y'] * df_check['derive_b'])\r\n",
					"df_check[(df_check['check_x'] != 0) | (df_check['check_y'] != 0)].head()"
				],
				"execution_count": 341
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_answer_2['check'] = df_answer_2.apply(lambda row: math.floor(row.derive_a), axis=1)\r\n",
					"df_answer_2[df_answer_2['check'] != df_answer_2['derive_a']]"
				],
				"execution_count": 329
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_answer_2.loc[0]"
				],
				"execution_count": 321
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_answer_2 = df_machine_behavior_2.copy()\r\n",
					"df_answer_2['prize_x'] = df_answer_2['prize_x'] + 10000000000000\r\n",
					"df_answer_2['prize_y'] = df_answer_2['prize_y'] + 10000000000000\r\n",
					"df_answer_2.loc[0]\r\n",
					"#derive_cost(df_answer_2.loc[0])"
				],
				"execution_count": 324
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}