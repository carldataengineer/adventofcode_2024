{
	"name": "day16_v2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "carlsmall",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8ac44c4f-475e-4aa8-92ce-534531eb93d5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d3313606-ce08-408b-8d6e-0965e2fba137/resourceGroups/rg_carl_follows/providers/Microsoft.Synapse/workspaces/asa-wks-carl-follows/bigDataPools/carlsmall",
				"name": "carlsmall",
				"type": "Spark",
				"endpoint": "https://asa-wks-carl-follows.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/carlsmall",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd"
				],
				"execution_count": 414
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"x_tiles = 141\r\n",
					"\r\n",
					"col_specs = []\r\n",
					"for i in range(x_tiles):\r\n",
					"    col_specs.append((i, i+1))\r\n",
					"\r\n",
					"df_input = pd.read_fwf(\"abfss://fsn-carl-follows@adlscarlfollows.dfs.core.windows.net/day16/test_input.txt\"\\\r\n",
					"                    , header=None\\\r\n",
					"                    , index_col=False\\\r\n",
					"                    , colspecs=col_specs)\r\n",
					"df_input.columns = range(0, len(df_input.columns))\r\n",
					"\r\n",
					"y_tiles = df_input.shape[0]\r\n",
					"df_input.head()"
				],
				"execution_count": 415
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def urdl(row):\r\n",
					"    if row['urdl'] == '^':\r\n",
					"        row['y'] = row.name[0] - 1\r\n",
					"        row['x'] = row.name[1]\r\n",
					"    elif row['urdl'] == '>':\r\n",
					"        row['y'] = row.name[0]\r\n",
					"        row['x'] = row.name[1] + 1\r\n",
					"    elif row['urdl'] == 'v':\r\n",
					"        row['y'] = row.name[0] + 1\r\n",
					"        row['x'] = row.name[1]\r\n",
					"    elif row['urdl'] == '<':\r\n",
					"        row['y'] = row.name[0]\r\n",
					"        row['x'] = row.name[1] - 1\r\n",
					"    \r\n",
					"    return row\r\n",
					"\r\n",
					"#r = df_available_locations.iloc[2].copy()\r\n",
					"#print (f\"working on ({r.name[0]}, {r.name[1]})\")\r\n",
					"#urdl(r)"
				],
				"execution_count": 416
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def move_cost(row):\r\n",
					"\r\n",
					"    move_cost = row['contents_current'][0] + 1\r\n",
					"\r\n",
					"    cur_dir = row['contents_current'][1]\r\n",
					"    if cur_dir != row['urdl']:\r\n",
					"        move_cost += 1000\r\n",
					"\r\n",
					"    if row['contents_potential'] == '.':\r\n",
					"        potential_cost = 999999\r\n",
					"    else:\r\n",
					"        potential_cost = row['contents_potential'][0]\r\n",
					"\r\n",
					"    if move_cost < potential_cost:\r\n",
					"        row['cost_move'] = move_cost\r\n",
					"        row['contents_move'] = [move_cost, row['urdl'], int(row['step_current'] + 1)]\r\n",
					"        row['step_move'] = int(row['step_current'] + 1)\r\n",
					"        \r\n",
					"        #print (f\"Taking step {row['step_move']} at a cost of {move_cost} as better than {potential_cost} now pointing in direction {row['urdl']}\")\r\n",
					"    else:\r\n",
					"        row['cost_move'] = -1\r\n",
					"        row['contents_move'] = '~'\r\n",
					"        row['step_move'] = -1\r\n",
					"    \r\n",
					"        #print (f\"No step as cost of {move_cost} is worse than {potential_cost} in direction {row['urdl']}\")\r\n",
					"\r\n",
					"    return row\r\n",
					"\r\n",
					"#r = df_move_locations.iloc[0].copy()\r\n",
					"#move_cost(r)"
				],
				"execution_count": 470
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# pivot to list of coordinates\r\n",
					"df_locations = df_input.stack().to_frame().rename_axis(index=('y','x'))\r\n",
					"df_locations.columns = ['contents']\r\n",
					"\r\n",
					"#find the reindeer\r\n",
					"reindeer_xy = df_locations[df_locations['contents'] == 'S']\r\n",
					"reindeer_y = reindeer_xy.index[0][0]\r\n",
					"reindeer_x = reindeer_xy.index[0][1]\r\n",
					"print(f\" Reindeer_x at ({reindeer_y},{reindeer_x})\")\r\n",
					"\r\n",
					"df_locations.at[(reindeer_y,reindeer_x),'step']=0\r\n",
					"df_locations.at[(reindeer_y,reindeer_x),'contents']=[0,'>',0]\r\n",
					"#df_locations.loc[[(reindeer_y,reindeer_x)]] \r\n",
					"#df_locations.head(30)"
				],
				"execution_count": 508
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"step = 0\r\n",
					"keep_walking = True\r\n",
					"\r\n",
					"while keep_walking == True:\r\n",
					"\r\n",
					"    df_current_locations = df_locations[df_locations['step'] == step].copy()\r\n",
					"    df_current_locations['urdl'] = [['^','>','v','<']] * df_current_locations.shape[0]\r\n",
					"    df_current_locations = df_current_locations.explode('urdl')\r\n",
					"    df_current_locations = df_current_locations.apply(urdl, axis=1)\r\n",
					"    df_current_locations.set_index(['y','x'], inplace=True)\r\n",
					"\r\n",
					"    df_available_locations = df_locations[df_locations['contents'].isin(['#']) == False].copy()\r\n",
					"    df_potential_moves = df_current_locations.merge(df_available_locations, how='inner', left_index=True, right_index=True, suffixes=('_current','_potential'))\r\n",
					"\r\n",
					"    #locations = [(12,0),(12,1),(12,2),(13,0),(13,1),(13,2),(14,0),(14,1),(14,2)]\r\n",
					"    #df_potential_moves[df_potential_moves.index.isin(locations)].head(20)\r\n",
					"\r\n",
					"    if (df_potential_moves[df_potential_moves['contents_potential']=='E'].shape[0] ==0):\r\n",
					"        df_potential_moves = df_potential_moves.apply(move_cost, axis=1)\r\n",
					"        step += 1    \r\n",
					"        df_good_moves = df_potential_moves.groupby(['y','x']).agg({\r\n",
					"            'contents_move': 'min',\r\n",
					"            'step_move': 'min'\r\n",
					"        })\r\n",
					"        df_good_moves = df_good_moves[df_good_moves['step_move'] == step]\r\n",
					"\r\n",
					"        df_locations.loc[df_good_moves.index, ['contents']] = df_good_moves['contents_move']\r\n",
					"        df_locations.loc[df_good_moves.index, ['step']] = df_good_moves['step_move']\r\n",
					"    else:\r\n",
					"        keep_walking = False\r\n",
					"\r\n",
					"    #if step >= 27:\r\n",
					"    #    keep_walking = False"
				],
				"execution_count": 509
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#df_visited_locations = df_locations[df_locations['contents'].isin(['.','#','E']) == False].copy()\r\n",
					"#df_visited_locations.head()\r\n",
					"\r\n",
					"df_locations[['contents']].unstack()"
				],
				"execution_count": 510
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": 507
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"step = 27\r\n",
					"\r\n",
					"df_current_locations = df_locations[df_locations['step'] == step].copy()\r\n",
					"df_current_locations['urdl'] = [['^','>','v','<']] * df_current_locations.shape[0]\r\n",
					"df_current_locations = df_current_locations.explode('urdl')\r\n",
					"df_current_locations = df_current_locations.apply(urdl, axis=1)\r\n",
					"df_current_locations.set_index(['y','x'], inplace=True)\r\n",
					"df_current_locations.head(10)"
				],
				"execution_count": 502
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_available_locations = df_locations[df_locations['contents'].isin(['#']) == False].copy()\r\n",
					"df_potential_moves = df_current_locations.merge(df_available_locations, how='inner', left_index=True, right_index=True, suffixes=('_current','_potential'))\r\n",
					"\r\n",
					"#locations = [(12,0),(12,1),(12,2),(13,0),(13,1),(13,2),(14,0),(14,1),(14,2)]\r\n",
					"#df_potential_moves[df_potential_moves.index.isin(locations)].head(20)\r\n",
					"\r\n",
					"df_potential_moves[(df_potential_moves.index.get_level_values(0) > 10) & df_potential_moves.index.get_level_values(1) < 4].head(20)"
				],
				"execution_count": 503
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_potential_moves = df_potential_moves.apply(move_cost, axis=1)\r\n",
					"df_good_moves = df_potential_moves.groupby(['y','x']).agg({\r\n",
					"    'contents_move': 'min',\r\n",
					"    'step_move': 'min'\r\n",
					"})\r\n",
					"df_good_moves = df_good_moves[df_good_moves['step_move'] == step]\r\n",
					"df_good_moves.head()"
				],
				"execution_count": 493
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_potential_moves = df_potential_moves.apply(move_cost, axis=1)\r\n",
					"step += 1\r\n",
					"df_good_moves = df_potential_moves[df_potential_moves['step_move'] == step]\r\n",
					"df_good_moves.head()"
				],
				"execution_count": 476
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_locations.loc[df_good_moves.index, ['contents']] = df_good_moves['contents_move']\r\n",
					"df_locations.loc[df_good_moves.index, ['step']] = df_good_moves['step_move']"
				],
				"execution_count": 426
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_visited_locations = df_locations[df_locations['contents'].isin(['.','#','E']) == False].copy()\r\n",
					"df_visited_locations.head()"
				],
				"execution_count": 427
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}