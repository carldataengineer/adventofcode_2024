{
	"name": "day14",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "carlsmall2",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "839a98f4-e7f3-4bea-b556-1845b25e5794"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d3313606-ce08-408b-8d6e-0965e2fba137/resourceGroups/rg_carl_follows/providers/Microsoft.Synapse/workspaces/asa-wks-carl-follows/bigDataPools/carlsmall2",
				"name": "carlsmall2",
				"type": "Spark",
				"endpoint": "https://asa-wks-carl-follows.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/carlsmall2",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd\r\n",
					"import numpy as np\r\n",
					"import math\r\n",
					"import re"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"x_tiles = 101\r\n",
					"y_tiles = 103\r\n",
					"x_mid = (x_tiles + 1)/ 2\r\n",
					"y_mid = (y_tiles + 1)/ 2\r\n",
					"\r\n",
					"df_input = pd.read_fwf(\"abfss://fsn-carl-follows@adlscarlfollows.dfs.core.windows.net/day14/input.txt\"\\\r\n",
					"                    , header=None\\\r\n",
					"                    , index_col=False\\\r\n",
					"                    , names=['behaviour']\r\n",
					"                    , colspecs=[[0,50]])\r\n",
					"\r\n",
					"df_input.head()"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def split_behaviour(row):\r\n",
					"    behaviours = re.findall(r\"p=(\\d*),(\\d*)\\sv=(-?\\d*),(-?\\d*)\", row['behaviour'])[0]\r\n",
					"    row['px'] = behaviours[0]\r\n",
					"    row['py'] = behaviours[1]\r\n",
					"    row['vx'] = behaviours[2]\r\n",
					"    row['vy'] = behaviours[3]\r\n",
					"\r\n",
					"    return row"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"split_behaviour(df_input.loc[1])['px']"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_robot_behavior = df_input.copy()\r\n",
					"df_robot_behavior = df_robot_behavior.apply(split_behaviour, axis=1)\r\n",
					"df_robot_behavior_2 = df_robot_behavior.copy()\r\n",
					"df_robot_behavior.head()"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_robot_behavior['px_100s'] = df_robot_behavior.apply(lambda row: ((int(row.px) + (int(row.vx)*100))%x_tiles)+1, axis=1)\r\n",
					"df_robot_behavior['py_100s'] = df_robot_behavior.apply(lambda row: ((int(row.py) + (int(row.vy)*100))%y_tiles)+1, axis=1)\r\n",
					"df_robot_behavior.head(10)"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_robot_behavior['q_x'] = df_robot_behavior.apply(lambda row: 'R' if row.px_100s>x_mid else 'L' if row.px_100s<x_mid else 'M', axis=1)\r\n",
					"df_robot_behavior['q_y'] = df_robot_behavior.apply(lambda row: 'B' if row.py_100s>y_mid else 'T' if row.py_100s<y_mid else 'M', axis=1)\r\n",
					"df_robot_behavior.head(20)"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_results = df_robot_behavior.groupby(['q_x','q_y'])['behaviour'].count().to_frame()\r\n",
					"df_results.columns = ['count']\r\n",
					"\r\n",
					"filter_set = [('L', 'T'), ('L', 'B'), ('R', 'T'), ('R', 'B')]\r\n",
					"df_results = df_results.loc[filter_set]\r\n",
					"df_results.head()"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"result = 1\r\n",
					"\r\n",
					"for val in df_results['count']:\r\n",
					"    result = result * val\r\n",
					"    \r\n",
					"print(result)"
				],
				"execution_count": 21
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"part 2"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_grid(x,y):\r\n",
					"\r\n",
					"    x_values = []\r\n",
					"    y_values = []\r\n",
					"\r\n",
					"    for i in range(1,x+1):\r\n",
					"        x_values.append(i)\r\n",
					"        df_x = pd.DataFrame(x_values)\r\n",
					"        df_x.columns = ['x']\r\n",
					"        df_x['join_key'] = 0\r\n",
					"    for i in range(1,y+1):\r\n",
					"        y_values.append(i)\r\n",
					"        df_y = pd.DataFrame(y_values)\r\n",
					"        df_y.columns = ['y']\r\n",
					"        df_y['join_key'] = 0\r\n",
					"\r\n",
					"    df_combinations = pd.merge(df_x, df_y, on='join_key')\r\n",
					"    return df_combinations[['x', 'y']]"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"seconds = 0\r\n",
					"found_tree = False\r\n",
					"results = []\r\n",
					"\r\n",
					"df_robot_behavior_2['cur_x'] = df_robot_behavior_2['px']\r\n",
					"df_robot_behavior_2['cur_y'] = df_robot_behavior_2['py']\r\n",
					"#df_robot_behavior_2.copy()\r\n",
					"\r\n",
					"while ((found_tree == False) & (seconds < (x_tiles * y_tiles))):\r\n",
					"    seconds += 1\r\n",
					"\r\n",
					"    df_robot_behavior_2['cur_x'] = df_robot_behavior_2.apply(lambda row: ((int(row.cur_x) + int(row.vx))%x_tiles), axis=1)\r\n",
					"    df_robot_behavior_2['cur_y'] = df_robot_behavior_2.apply(lambda row: ((int(row.cur_y) + int(row.vy))%y_tiles), axis=1)\r\n",
					"\r\n",
					"    # evaluate\r\n",
					"\r\n",
					"    std_x = df_robot_behavior_2['cur_x'].std()\r\n",
					"    std_y = df_robot_behavior_2['cur_y'].std()\r\n",
					"    results += [[seconds, std_x, std_y]]\r\n",
					"\r\n",
					"print (F\"Elapsed {seconds} seconds\")\r\n",
					""
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_results = pd.DataFrame(results)\r\n",
					"df_results.columns = ['seconds', 'std_x', 'std_y']\r\n",
					"df_results['std_total'] = df_results['std_x'] + df_results['std_y']\r\n",
					"df_results.sort_values('std_total', ascending=True).head(5)"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_robot_behavior_2['px_trees'] = df_robot_behavior_2.apply(lambda row: ((int(row.px) + (int(row.vx)*7858))%x_tiles)+1, axis=1)\r\n",
					"df_robot_behavior_2['py_trees'] = df_robot_behavior_2.apply(lambda row: ((int(row.py) + (int(row.vy)*7858))%y_tiles)+1, axis=1)\r\n",
					"df_robot_behavior_2.head(10)"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_robot_locations = df_robot_behavior_2.groupby(['py_trees','px_trees'])['behaviour'].count().to_frame()\r\n",
					"df_robot_locations.index.names = ['y','x']\r\n",
					"df_robot_locations.columns = ['robot_count']\r\n",
					"#df_robot_locations.head()\r\n",
					"\r\n",
					"df_grid = get_grid(101,103)\r\n",
					"df_grid = df_grid.set_index(['y','x'])\r\n",
					"#df_grid.head(20)\r\n",
					"\r\n",
					"df_positions = df_grid.merge(df_robot_locations, how='left', left_index=True, right_index=True)\r\n",
					"df_positions.unstack().iloc[42:80, 41:61] "
				],
				"execution_count": 33
			}
		]
	}
}